using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using HalconDotNet;

namespace Omicron.Model
{
    public class HalconScript
    {
        // Local iconic variables 

        public HObject ho_Image;

        // Local control variables 

        public HTuple hv_AcqHandle;
        public HalconScript()
        {
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
        }
        public void HalconScriptInit()
        {
            HOperatorSet.SetSystem("do_low_error", "false");
            //Code generated by Image Acquisition 01
            if (hv_AcqHandle != null)
            {
                HalconScriptClose();
            }
            HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
                -1, "false", "default", "Integrated Camera", 0, -1, out hv_AcqHandle);
        }
        public void HalconScriptGrabImage()
        {
            HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
        }
        public void HalconScriptClose()
        {
            HOperatorSet.CloseFramegrabber(hv_AcqHandle);
        }
        public static HImage HObjectToHImage(HObject hObject)
        {
            HImage hImage = null;
            HTuple channels;
            HOperatorSet.CountChannels(hObject, out channels);
            if (channels.I == 1)
            {
                HTuple pointer, htype, width, height;
                HOperatorSet.GetImagePointer1(hObject, out pointer, out htype, out width, out height);
                hImage = new HImage();
                hImage.GenImage1(htype.S, width.I, height.I, pointer.IP);
            }
            else if (channels.I == 3)
            {
                HTuple pointerR, pointerG, pointerB, htype, width, height;
                HOperatorSet.GetImagePointer3(hObject, out pointerR, out pointerG, out pointerB, out htype, out width, out height);
                hImage = new HImage();
                hImage.GenImage3(htype.S, width.I, height.I, pointerR.IP, pointerG.IP, pointerB.IP);
            }
            return hImage;
        }
    }
}
